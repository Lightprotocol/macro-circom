use crate::Instance;
use std::{fs, io::prelude::*};

pub const DISCLAIMER_STRING: &str = "/**
* This file is auto-generated by the Light cli.
* DO NOT EDIT MANUALLY.
* THE FILE WILL BE OVERWRITTEN EVERY TIME THE LIGHT CLI BUILD IS RUN.
*/";
pub fn generate_circom_main_string(instance: &Instance, circuit_name: &str) -> String {
    let name = instance.template_name.as_ref().unwrap();
    let config = &instance.config;
    let public_inputs = instance.public_inputs.to_vec();

    let inputs_str = public_inputs.join(", ");
    let config_str = config
        .as_ref()
        .unwrap()
        .iter()
        .map(|c| c.to_string())
        .collect::<Vec<String>>()
        .join(", ");
    format!(
        "{}\npragma circom 2.1.4;\n\
include \"./{}.circom\";\n\
component main {{public [{}]}} =  {}({}{} 18, 4, 4, 184598798020101492503359154328231866914977581098629757339001774613643340069, 0, 1, 3, 2, 2);",
DISCLAIMER_STRING,circuit_name, inputs_str, name, config_str, if config_str.is_empty() { "" } else { "," }
    )
}

pub fn generate_circom_main_file(instance: Instance, file_name: &str, path_to_parent_dir: &str) {
    let mut output_file = fs::File::create(
        [
            &path_to_parent_dir.to_string(),
            "/",
            instance.file_name.as_str().clone(),
            &".circom",
        ]
        .concat(),
    )
    .unwrap();
    let code = generate_circom_main_string(&instance, file_name);
    println!(
        "sucessfully created main {}.circom and {}.circom",
        instance.file_name, file_name
    );

    write!(&mut output_file, "{}", code).unwrap();
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_circom_string_pass() {
        let instance = Instance {
            file_name: "appTransaction".to_owned(),
            template_name: Some(String::from("AppTransaction")),
            config: Some(vec![String::from("7"), String::from("1")]),
            public_inputs: vec![
                String::from("transactionHash"),
                String::from("publicAppVerifier"),
            ],
        };

        let expected_string = format!("{}\npragma circom 2.1.4;\n\
            include \"./circuit.circom\";\n\
            component main {{public [transactionHash, publicAppVerifier]}} =  AppTransaction(7, 1, 18, 4, 4, 184598798020101492503359154328231866914977581098629757339001774613643340069, 0, 1, 3, 2, 2);", DISCLAIMER_STRING);

        assert_eq!(
            generate_circom_main_string(&instance, "circuit"),
            expected_string
        );
    }

    #[test]
    fn test_generate_circom_string_pass2() {
        let instance = Instance {
            file_name: "appTransaction".to_owned(),
            template_name: Some(String::from("AppTransaction")),
            config: Some(vec![
                String::from("7"),
                String::from("1"),
                String::from("3"),
                String::from("2"),
            ]),
            public_inputs: vec![
                String::from("transactionHash"),
                String::from("publicAppVerifier"),
            ],
        };

        let expected_string = format!("{}\npragma circom 2.1.4;\n\
            include \"./circuit.circom\";\n\
            component main {{public [transactionHash, publicAppVerifier]}} =  AppTransaction(7, 1, 3, 2, 18, 4, 4, 184598798020101492503359154328231866914977581098629757339001774613643340069, 0, 1, 3, 2, 2);", DISCLAIMER_STRING);

        assert_eq!(
            generate_circom_main_string(&instance, "circuit"),
            expected_string
        );
    }

    #[test]
    #[should_panic(expected = "assertion failed")]
    fn test_generate_circom_string_fail() {
        let instance = Instance {
            file_name: "appTransaction".to_owned(),
            template_name: Some(String::from("AppTransaction")),
            config: Some(vec![String::from("7"), String::from("1")]),
            public_inputs: vec![
                String::from("transactionHash"),
                String::from("publicAppVerifier"),
            ],
        };

        let incorrect_expected_string = "pragma circom 2.1.4;\n\
            include \"./circuit.circom\";\n\
            component main {public [transactionHash, publicAppVerifier]} =  AppTransaction(7, 2 ,18, 4, 4, 184598798020101492503359154328231866914977581098629757339001774613643340069, 0, 1, 3, 2, 2);";

        assert_eq!(
            generate_circom_main_string(&instance, "circuit"),
            incorrect_expected_string
        );
    }
}
